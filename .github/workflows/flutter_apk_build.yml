#
# 🚀 Enhanced Flutter Build, Release, and Notify Workflow 🚀
#
# What's new and improved?
# 1.  **Semantic Versioning**: Instead of using a timestamp, this workflow now reads the version directly from your `pubspec.yaml` file (e.g., 1.0.0+1). This is the standard way to version releases.
# 2.  **Dedicated Actions**: Replaced all `curl` commands with specialized, community-trusted GitHub Actions. This makes the workflow more readable, maintainable, and less error-prone.
#       - `softprops/action-gh-release`: Creates the GitHub release and uploads assets in one clean step.
#       - `appleboy/telegram-action`: A dedicated action for sending Telegram messages, which is more reliable.
# 3.  **Enhanced Security**: Your `TELEGRAM_BOT_TOKEN` is no longer exposed in the code. It's now fetched from GitHub Secrets, which is the secure, recommended practice.
# 4.  **Improved Readability**: The steps are logically named with emojis, and the overall structure is much cleaner.
#

name: 🚀 Flutter Build, Release & Notify

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # This permission is required to create releases and upload assets

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Install jq
        run: sudo apt-get install -y jq
        # jq is a lightweight and flexible command-line JSON processor. We need it to parse the pubspec.yaml file.

      - name: 🔖 Get App Version from pubspec.yaml
        id: get_version
        run: |
          # Read the version from pubspec.yaml and set it as an output variable for later steps.
          # This creates a version like "v1.0.1+3" which is great for tags.
          APP_VERSION=$(cat pubspec.yaml | grep 'version:' | awk '{print $2}')
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_TAG=v${APP_VERSION}" >> $GITHUB_ENV
          echo "version_tag=v${APP_VERSION}" >> $GITHUB_OUTPUT

      - name: 🐦 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5' # You can change this to your required Flutter version
          channel: 'stable'
          cache: true # Enable caching for faster builds

      - name: 🔄 Get Dependencies
        run: flutter pub get

      - name: 💪 Build Release APK
        run: flutter build apk --release

      - name: 📦 Prepare Release Artifacts
        run: |
          # Create a directory to hold our release assets
          mkdir -p release_artifacts
          # Rename the built APK to include the app version and move it to the artifacts directory
          mv build/app/outputs/flutter-apk/app-release.apk release_artifacts/Issue-Tracker-${{ env.RELEASE_TAG }}.apk

      - name: 🚀 Create GitHub Release & Upload APK
        uses: softprops/action-gh-release@v2
        with:
          # The action will use the GITHUB_TOKEN secret automatically
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Release ${{ env.RELEASE_TAG }}"
          body: |
            ## ✨ New Release: ${{ env.RELEASE_TAG }}
            **App:** Issue Tracker
            **Released On:** ${{ env.DATE_TIME }}

            Another awesome update is here!
          # Path to the files you want to upload as release assets.
          # The wildcard '*' will upload all files in the release_artifacts directory.
          files: release_artifacts/*
        env:
          DATE_TIME: $(date +'%Y-%m-%d %H:%M:%S')

      - name: 📲 Notify via Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            *🚀 New Flutter Release!*

            *App:* `Issue Tracker`
            *Version:* `${{ env.RELEASE_TAG }}`
            *Repository:* `${{ github.repository }}`

            A new version has just been released. Check it out on GitHub!
            [View Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }})
